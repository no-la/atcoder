{
	"main": {
		"prefix": "main",
		"body": [
			"if __name__ == '__main__':",
			"    ${1:pass}"
		],
		"description": "main"
	},
	"direction": {
		"prefix": "direction",
		"body": [
			"s = ${1:str}",
            "if s==\"L\":",
            "    delta = (0, -1)",
            "elif s==\"R\":",
            "    delta = (0, 1)",
            "elif s==\"U\":",
            "    delta = (-1, 0)",
            "elif s==\"D\":",
            "    delta = (1, 0)"
		]
	},
	"abcdefg": {
		"prefix": "abcdefg",
		"body": [
			"abcdefghijklmnopqrstuvwxyz"
		]
	},
	"ABCDEFG": {
		"prefix": "ABCDEFG",
		"body": [
			"ABCDEFGHIJKLMNOPQRSTUVWXYZ"
		]
	},
	"N": {
		"prefix": "N",
		"body": [
			"N = int(input())"
		]
	},
	"NM": {
		"prefix": "NM",
		"body": [
			"N, M = map(int, input().split())"
		]
	},
	"S": {
		"prefix": "S",
		"body": [
			"S = input()"
		]
	},
	"HW": {
		"prefix": "HW",
		"body": [
			"H, W = map(int, input().split())"
		]
	},
	"inti": {
		"prefix": "inti",
		"body": [
			"int(input())"
		]
	},
	"map": {
		"prefix": "map",
		"body": [
			"map(${1:int}, ${2:input().split()})"
		]
	},
	"for_": {
		"prefix": "for_",
		"body": [
			"for _ in range(${1:N}):"
		]
	},
	"fori": {
		"prefix": "fori",
		"body": [
			"for i in range(${1:N}):"
		]
	},
	"forj": {
		"prefix": "forj",
		"body": [
			"for j in range(${1:N}):"
		]
	},
	"defaultdict": {
		"prefix": "defaultdict",
		"body": [
			"from collections import defaultdict",
			"d = defaultdict(${1:list})"
		]
	},
	"bisect": {
		"prefix": "bisect",
		"body": [
			"import bisect",
			"#基本的にbisect_leftを使う",
			"#渡す配列は昇順(reverse=False)ソートしておく"
		]
	},
	"heapq": {
		"prefix": "heapq",
		"body": [
			"from heapq import heapify, heappop, heappush",
			"#heapify(a:list)",
			"#heappop(a) (最小値)",
			"#heappush(a, value)"
		]
	},
	"permutation": {
		"prefix": "permutation",
		"body": [
			"# 順列 O(nPk)<=n!",
			"import itertools",
			"for l in itertools.permutations(${1:要素のリスト}, ${2:選ぶ個数}):"
		]
	},
	"combination": {
		"prefix": "combination",
		"body": [
			"# 重複なし組み合わせ O(nCk)",
			"import itertools",
			"for l in itertools.combinations(${1:要素のリスト}, ${2:選ぶ個数}):"
		]
	},
	"homogeneous": {
		"prefix": "homogeneous",
		"body": [
			"# 重複あり組み合わせ O(nHk)=O(n+k-1Ck)",
			"import itertools",
			"for l in itertools.combinations_with_replacement(${1:要素のリスト}, ${2:選ぶ個数}):"
		]
	},
	"syakutori": {
		"prefix": "syakutori",
		"body": [
			"#尺取り法",
			"ans = 0",
			"right = 0",
			"temp = ${1:初期値} #部分列による値（条件の判定に必要なときに使う）",
			"for left in range(${2:N}):",
			"\twhile ${3:部分列が満たすべき条件}: # 条件の判定",
			"\t\ttemp += ${4:A[right]}",
			"\t\tright += 1",
			"\tans = ${5:max}(ans, right-left)",
			"\tif left == right: #[left, right)が空集合なので'temp=初期値'になっているはず",
			"\t\tright += 1",
			"\telse: #このあとleftを+1するので、その分の情報を削る",
			"\t\ttemp -= ${6:A[left]}"
		]
	},
	"BFS": {
		"prefix": "BFS",
		"body": [
			"#BFS",
			"from collections import deque",
			"todo = deque(${1:初期値})",
			"dist = [-1]*${2:N} #todo[0]からの距離のリスト",
			"dist[${3:todo[0]}] = 0",
			"while todo:",
			"\tv = todo.popleft()",
			"\tfor ${4:w in vの周り}:",
			"\t\tif dist[${5:w}]!=-1: #既に調べた点は飛ばす",
			"\t\t\tcontinue",
			"\t\tif ${6:調べる点が満たすべき条件}:",
			"\t\t\ttodo.append(${7:点})",
			"\t\t\tdist[${8:w}] = dist[${9:v}]+1"
		]
	},
	"DFS": {
		"prefix": "DFS",
		"body": [
			"#DFS",
			"from collections import deque",
			"todo = deque(${1:初期値})",
			"seen = [False]*${2:N} #ここはsetでもよい",
			"seen[${3:todo[0]}] = True",
			"while todo:",
			"\tv = todo.pop()",
			"\tfor ${4:w in vの周り}:",
			"\t\tif seen[${5:w}]: #既に調べた点は飛ばす",
			"\t\t\tcontinue",
			"\t\tif ${6:調べる点が満たすべき条件}:",
			"\t\t\ttodo.append(${7:点})",
			"\t\t\tseen[${8:w}] = True"
		]
	},
	"imos": {
		"prefix": "imos",
		"body": [
			"#imos法",
			"imos = [0]*${1:N}",
			"#始点に+x, 終点の次の点に-xする",
			"#適当な処理",
			"for i in range(1, len(imos)):",
			"\timos[i] += imos[i-1]"
		]
	},
	"segmentTree": {
		"prefix": "segmentTree",
		"body": [
			"class SegTree:",
			"\tdef __init__(self, num, e, operator=max):",
			"\t\t\"\"\"",
			"\t\tparameter",
			"\t\t\tnum : 要素数",
			"\t\t\te : 単位元(初期値)",
			"\t\t\toperator : 2つの子ノードの値から親ノードの値を作る関数",
			"\t\t\"\"\"",
			"\t\t#self.tree[i+self.offset]:要素iのみの区間の値",
			"\t\tself.offset = 1 << (num-1).bit_length()",
			"\t\tself.tree = [e]*(self.offset<<1)",
			"\t\tself.e = e",
			"\t\tself.operator = operator",
			"\t",
			"\tdef update(self, i, value):",
			"\t\t\"\"\"i番目の要素をvalueにする",
			"\t\t\"\"\"",
			"\t\ti += self.offset",
			"\t\tself.tree[i] = value",
			"\t\t#親ノードを順に変更していく",
			"\t\twhile i>1:",
			"\t\t\tv1, v2 = self.tree[i], self.tree[i^1] #子ノード",
			"\t\t\ti >>= 1 #iを親ノードへずらす",
			"\t\t\tself.tree[i] = self.operator(v1, v2)",
			"\t\t\t",
			"\tdef get_point(self, p):",
			"\t\t\"\"\"p番目の要素を取得する",
			"\t\t\"\"\"",
			"\t\treturn self.tree[p+self.offset]",
			"\t",
			"\tdef get_range(self, l, r):",
			"\t\t\"\"\"区間[l, r)の値を取得する",
			"\t\t\"\"\"",
			"\t\tl += self.offset",
			"\t\tr += self.offset",
			"\t\t",
			"\t\tans = self.e",
			"\t\twhile l<r:",
			"\t\t\tif r&1:",
			"\t\t\t\tans = self.operator(ans, self.tree[r-1])",
			"\t\t\t\tr -= 1",
			"\t\t\tif l&1:",
			"\t\t\t\tans = self.operator(ans, self.tree[l])",
			"\t\t\t\tl += 1",
			"\t\t\tl >>= 1",
			"\t\t\tr >>= 1",
			"\t\treturn ans"
				]
	},
	"dijkstra": {
		"prefix": "dijkstra",
		"body": [
			"import heapq",
			"",
			"def dijkstra(edges, N, start=0):",
			"\t\"\"\"",
			"\tparameter",
			"\t\tedges[i][_] : [点iから向かう点, コスト]",
			"\t\tN : 点の個数(=len(edges))",
			"\t\tstart : 探索を始める点",
			"\t\"\"\"",
			"\tdist = [float(\"inf\")]*N # dist[i]: startからiまでのコスト",
			"\tdist[start] = 0 # スタートは0",
			"\tseen = [False]*N",
			"\t",
			"\thq = [] # コスト, 向かう点",
			"\theapq.heappush(hq, (0, start))",
			"",
			"\twhile hq:",
			"\t\t_, current = heapq.heappop(hq)",
			"\t\t",
			"\t\tif seen[current]: # 同じ点を二度見ない",
			"\t\t\tcontinue",
			"\t\tseen[current] = True",
			"\t\tfor to, cost in edges[current]:",
			"\t\t\tif dist[current] + cost < dist[to]: # 最短距離を更新できるときだけheappush()",
			"\t\t\t\tdist[to] = dist[current] + cost",
			"\t\t\t\theapq.heappush(hq, (dist[current] + cost, to))",
			"\treturn dist"
		]
	},
	"memo_recursion": {
		"prefix": "memo_recursion",
		"body": [
			"from functools import cache",
			"#メモ化再帰",
			"@cache",
			"def f(n):",
			"\t${1:pass}"
		]
	},
	"union_find": {
		"prefix": "union_find",
		"body": [
			"class UnionFind():",
			"\t\"\"\"",
			"\t集合を木と捉え、各要素にその根を持たせる",
			"\tUnion : 2つの木を合併する",
			"\tFind : 要素の根を返す",
			"\t\"\"\"",
			"\t",
			"\tdef __init__(self, n) -> None:",
			"\t\t\"\"\"",
			"\t\tparameter",
			"\t\t\tn : 要素数",
			"\t\t\"\"\"",
			"\t\tself.n = n",
			"\t\tself.parents = [-1]*n",
			"\t\tself.rank = [0]*n",
			"\t",
			"\tdef find(self, x):",
			"\t\t\"\"\"",
			"\t\txの根を返す",
			"\t\t\"\"\"",
			"\t\tif self.parents[x]==-1:",
			"\t\t\treturn x",
			"\t\telse:",
			"\t\t\t# 値を更新しながら根を探す",
			"\t\t\t# 深さは最大でlog(n)なので、再帰関数でok",
			"\t\t\tself.parents[x] = self.find(self.parents[x])",
			"\t\t\treturn self.parents[x]",
			"\t",
			"\tdef union(self, x, y):",
			"\t\t\"\"\"",
			"\t\txを含む木とyを含む木を合併する",
			"\t\t\"\"\"",
			"\t\tx = self.find(x)",
			"\t\ty = self.find(y)",
			"\t",
			"\t\tif x==y:",
			"\t\t\treturn",
			"\t\t",
			"\t\tif self.rank[x] > self.rank[y]:",
			"\t\t\tx, y = y, x",
			"\t\t",
			"\t\tself.parents[x] = y",
			"\t\t",
			"\t\tif self.rank[x] == self.rank[y]:",
			"\t\t\tself.rank[y] += 1"
		]
	},
	"osa_k": {
		"prefix": "osa_k",
		"body": [
			"# osa_k法",
			"MAXN = ${1:10**6+10}",
			"sieve = [i for i in range(MAXN)] # sieve[i]: iの最も小さい素因数",
			"p = 2",
			"while p*p<=MAXN: # O(MAXN * loglog MAXN)",
			"\tif sieve[p]==p:",
			"\t\tfor q in range(p*p, MAXN, p):",
			"\t\t\tif sieve[q]==q:",
			"\t\t\t\tsieve[q] = p",
			"\tp += 1",
			"",
			"from collections import defaultdict",
			"def prime_factors(n):",
			"\t\"\"\"n(2<=n<=MAXN)の素因数を返す\"\"\"",
			"\td = defaultdict(int) # 適宜変更",
			"\twhile n>1: # O(log n)",
			"\t\td[sieve[n]] += 1",
			"\t\tn //= sieve[n]",
			"\treturn d"
		]
	},
	"doubling": {
		"prefix": "doubling",
		"body": [
			"# ダブリング",
			"import math",
			"",
			"MAX_OP = ${1:K} # 操作の最大回数",
			"P_NUM = ${2:N} # 頂点の個数",
			"DB_NUM = int(math.log2(MAX_OP)) + 1",
			"",
			"# dp[i][j]: 頂点jから2^i回の操作後の頂点",
			"dp = [[0]*P_NUM for _ in range(DB_NUM)]",
			"",
			"# dp[0][0:X]を初期化",
			"for i in range(P_NUM):",
			"\tdp[0][i] = A[i]",
			"",
			"# ダブリングで表を構築 O(P_NUM*logMAX_OP)",
			"for k in range(1, DB_NUM):",
			"\tfor n in range(P_NUM):",
			"\t\tdp[k][n] = dp[k - 1][dp[k - 1][n]]",
			"",
			"",
			"# K回操作後の頂点を得る",
			"now = ${3:0} # 始点",
			"for i in range(DB_NUM):",
			"\tif ${4:K}>>i & 1:",
			"\t\tnow = dp[i][now]"
		]
	},
	"bit_exploretion": {
		"prefix": "bit_exploretion",
		"body": [
			"# bit全探索",
			"A = []",
			"N = len(A)",
			"for i in range(2 ** N):",
			"\tfor j in range(N):",
			"\t\tif not ((i >> j) & 1):",
			"\t\t\tcontinue",
			"\t\t# A[j]を選ぶ場合なので、適当な処理を書く"
		]
	},
	"MOD": {
		"prefix": "MOD",
		"body":[
			"MOD = 998244353"
		]
	}
}